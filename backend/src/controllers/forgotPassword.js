import { userModel } from "../models/user.js";
import { forgotPasswordModel } from "../models/forgotPassword.js";
import { mailer } from "../config/nodemailer.js"; // s·ª≠a import
import { nanoidNumbersOnly } from "../utils/nanoid.js";
import bcrypt from "bcrypt";
import { validator } from "../utils/validator.js";

export const forgotPasswordController = {
  // üì© G·ª≠i m√£ OTP
  async requestOTP(req, res) {
    try {
      const { username } = req.body;

      const user = await userModel.getUserByUsername(username);
      if (!user || !user.email) {
        return res
          .status(404)
          .json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ho·∫∑c email." });
      }

      // T·∫°o m√£ OTP 6 s·ªë
      const otp = nanoidNumbersOnly().substring(0, 6);
      const expireAt = new Date(Date.now() + 5 * 60 * 1000); // 5 ph√∫t

      await forgotPasswordModel.createOTP(username, otp, expireAt);

      // ‚úÖ D√πng mailer thay v√¨ nodemailerConfig
      await mailer.sendMail({
        from: process.env.MAIL_USER,
        to: user.email,
        subject: "M√£ OTP ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u",
        text: `M√£ OTP c·ªßa b·∫°n l√†: ${otp}. H·∫øt h·∫°n sau 5 ph√∫t.`,
      });

      res.json({ message: "ƒê√£ g·ª≠i m√£ OTP ƒë·∫øn email c·ªßa b·∫°n." });
    } catch (err) {
      console.error("L·ªói g·ª≠i OTP:", err);
      res.status(500).json({ message: "L·ªói g·ª≠i m√£ OTP." });
    }
  },

  // ‚úÖ X√°c th·ª±c m√£ OTP
  async verifyOTP(req, res) {
    try {
      const { username, otp } = req.body;
      const record = await forgotPasswordModel.verifyOTP(username, otp);
      if (!record)
        return res
          .status(400)
          .json({ message: "M√£ OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n." });

      res.json({ message: "X√°c th·ª±c OTP th√†nh c√¥ng." });
    } catch (err) {
      console.error("L·ªói verify OTP:", err);
      res.status(500).json({ message: "L·ªói x√°c th·ª±c OTP." });
    }
  },

  // üîë ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
  async resetPassword(req, res) {
    try {
      const { username, otp, newPassword } = req.body;

      const record = await forgotPasswordModel.verifyOTP(username, otp);
      if (!record)
        return res
          .status(400)
          .json({ message: "M√£ OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n." });

      const hashed = await bcrypt.hash(newPassword, 10);
    await forgotPasswordModel.updatePassword(username, hashed);
      await forgotPasswordModel.deleteOTP(username);

      res.json({ message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng." });
    } catch (err) {
      console.error("L·ªói reset m·∫≠t kh·∫©u:", err);
      res.status(500).json({ message: "L·ªói ƒë·ªïi m·∫≠t kh·∫©u." });
    }
  },
};
