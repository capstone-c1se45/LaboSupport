// src/controllers/adminUser.js
import bcrypt from "bcrypt";
import { userModel } from "../models/user.js";
import { profileModel } from "../models/profile.js";
import { validator } from "../utils/validator.js"; // import validator

export const adminUserController = {
  // üìã L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng
  async getAll(req, res) {
    try {
      const users = await userModel.getAllUsersWithProfile();
      res.status(200).json(users);
    } catch (error) {
      console.error("Error getAll:", error);
      res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng." });
    }
  },

  // ‚ûï Th√™m ng∆∞·ªùi d√πng m·ªõi
  async create(req, res) {
    try {
      const { username, password, full_name, email, phone, role_id } = req.body;

      // ‚úÖ Validate c∆° b·∫£n
      if (!username || !password || !email) {
        return res.status(400).json({ message: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc." });
      }

      if (!validator.isEmail(email)) {
        return res.status(400).json({ message: "Email kh√¥ng h·ª£p l·ªá." });
      }

      if (!validator.isStrongPassword(password)) {
        return res.status(400).json({
          message:
            "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±, g·ªìm ch·ªØ hoa, s·ªë v√† k√Ω t·ª± ƒë·∫∑c bi·ªát.",
        });
      }

      if (phone && !validator.isValidPhone(phone)) {
        return res.status(400).json({ message: "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá." });
      }

      // üö® Ki·ªÉm tra username ho·∫∑c email ƒë√£ t·ªìn t·∫°i ch∆∞a
      const existingUser = await userModel.getUserByUsername(username);
      if (existingUser) {
        return res.status(400).json({ message: "Username ƒë√£ t·ªìn t·∫°i." });
      }

      const existingEmail = await userModel.getUserByEmail(email);
      if (existingEmail) {
        return res.status(400).json({ message: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng." });
      }

      // ‚úÖ N·∫øu qua h·∫øt ‚Üí t·∫°o m·ªõi
      const hashedPassword = await bcrypt.hash(password, 10);
      const newUser = {
        username,
        password: hashedPassword,
        full_name,
        email,
        phone,
        role_id: role_id || "user",
      };

      const user = await userModel.createUser(newUser);
      res.status(201).json({ message: "T·∫°o ng∆∞·ªùi d√πng th√†nh c√¥ng.", user });
    } catch (error) {
      console.error("Error create user:", error);
      res.status(500).json({ message: "L·ªói khi t·∫°o ng∆∞·ªùi d√πng." });
    }
  },

  // ‚úèÔ∏è C·∫≠p nh·∫≠t th√¥ng tin ho·∫∑c vai tr√≤/m·∫≠t kh·∫©u
   async update(req, res) {
    try {
      const { id } = req.params;
      const {
        password,
        role_id,
        address,
        dob,
        gender,
        occupation,
        email,
        phone,
        full_name,
        ...rest
      } = req.body;

      // ‚úÖ Validate
      if (email && !validator.isEmail(email)) {
        return res.status(400).json({ message: "Email kh√¥ng h·ª£p l·ªá." });
      }

      if (phone && !validator.isValidPhone(phone)) {
        return res.status(400).json({ message: "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá." });
      }

      if (dob && !validator.isValidDate(dob)) {
        return res
          .status(400)
          .json({ message: "Ng√†y sinh kh√¥ng h·ª£p l·ªá ho·∫∑c l·ªõn h∆°n hi·ªán t·∫°i." });
      }

      if (gender && !validator.isValidGender(gender)) {
        return res.status(400).json({ message: "Gi·ªõi t√≠nh kh√¥ng h·ª£p l·ªá." });
      }

      if (full_name && !validator.isValidName(full_name)) {
        return res.status(400).json({ message: "T√™n kh√¥ng h·ª£p l·ªá." });
      }

      if (password && !validator.isStrongPassword(password)) {
        return res.status(400).json({
          message:
            "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±, g·ªìm ch·ªØ hoa, s·ªë v√† k√Ω t·ª± ƒë·∫∑c bi·ªát.",
        });
      }

      // üö® Ki·ªÉm tra email b·ªã tr√πng (n·∫øu admin ƒë·ªïi email)
      if (email) {
        const existingEmail = await userModel.getUserByEmail(email);
        if (existingEmail && existingEmail.user_id !== id) {
          return res.status(400).json({ message: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng." });
        }
      }

      // ‚úÖ Chu·∫©n ho√° data
      const data = { ...rest };
      if (password) data.password = await bcrypt.hash(password, 10);
      if (role_id) data.role_id = role_id;
      if (email) data.email = email;
      if (phone) data.phone = phone;
      if (full_name) data.full_name = full_name;

      // ‚úÖ C·∫≠p nh·∫≠t
      if (typeof userModel.updateUserWithProfile === "function") {
        const merged = {
          ...data,
          address,
          dob,
          gender,
          occupation,
        };
        const ok = await userModel.updateUserWithProfile(id, merged);
        if (!ok)
          return res
            .status(404)
            .json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng." });
      } else {
        const updatedUser = await userModel.updateUser(id, data);
        if (!updatedUser)
          return res
            .status(404)
            .json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng." });

        if (address || dob || gender || occupation) {
          const existingProfile = await profileModel.getProfileByUserId(id);
          if (existingProfile) {
            await profileModel.updateProfileByUserId(id, {
              address,
              dob,
              gender,
              occupation,
            });
          } else {
            const profile_id = crypto.randomUUID();
            await profileModel.createProfile({
              profile_id,
              user_id: id,
              address,
              dob,
              gender,
              occupation,
            });
          }
        }
      }

      return res
        .status(200)
        .json({ message: "C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng th√†nh c√¥ng." });
    } catch (error) {
      console.error("Error update user:", error?.stack || error);
      return res.status(500).json({ message: "L·ªói khi c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng." });
    }
  },

  // ‚ùå X√≥a ng∆∞·ªùi d√πng
  async delete(req, res) {
    try {
      const { id } = req.params;
      await userModel.deleteUser(id);
      res.json({ message: "X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng." });
    } catch (error) {
      console.error("Error delete user:", error);
      res.status(500).json({ message: "L·ªói khi x√≥a ng∆∞·ªùi d√πng." });
    }
  },
};
