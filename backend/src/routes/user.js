import { Router } from "express";
import { userController } from "../controllers/user.js";
import { authMiddleware } from "../middlewares/auth.js";
import { validateRegister, validateLogin, validateEmailForOtp } from "../middlewares/validateUser.js"; // th√™m middleware validate

const router = Router();

/**
 * @openapi
 * tags:
 *   name: Users
 *   description: API qu·∫£n l√Ω ng∆∞·ªùi d√πng
 */

/**
 * @openapi
 * /api/users:
 *   get:
 *     summary: L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng
 *     tags: [Users]
 *     responses:
 *       200:
 *         description: Th√†nh c√¥ng
 */
router.get("/", authMiddleware.verifyToken, userController.getAllUsers);

// üì® G·ª≠i m√£ x√°c nh·∫≠n email
router.post("/send-verify-code", validateEmailForOtp, userController.sendVerifyCode);

// üìù ƒêƒÉng k√Ω (validate ƒë·∫ßu v√†o tr∆∞·ªõc khi g·ªçi controller)
router.post("/register", validateRegister, userController.register);

/**
 * @openapi
 * /api/users/{id}:
 *   get:
 *     summary: L·∫•y th√¥ng tin chi ti·∫øt ng∆∞·ªùi d√πng theo ID
 *     tags: [Users]
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *         description: ID ng∆∞·ªùi d√πng
 *     responses:
 *       200:
 *         description: Th√†nh c√¥ng
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng
 */
router.get("/:id", authMiddleware.verifyToken, userController.getUserById);

/**
 * @openapi
 * /api/users/{id}:
 *   put:
 *     summary: C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
 *     tags: [Users]
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *         description: ID ng∆∞·ªùi d√πng c·∫ßn c·∫≠p nh·∫≠t
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               full_name:
 *                 type: string
 *                 example: "Tr·∫ßn Nh·∫≠t Updated"
 *               email:
 *                 type: string
 *                 example: "new@example.com"
 *     responses:
 *       200:
 *         description: C·∫≠p nh·∫≠t th√†nh c√¥ng
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng
 */
router.put("/:id", authMiddleware.verifyToken, userController.updateUser);

/**
 * @openapi
 * /api/users/{id}:
 *   delete:
 *     summary: X√≥a ng∆∞·ªùi d√πng theo ID
 *     tags: [Users]
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *         description: ID ng∆∞·ªùi d√πng
 *     responses:
 *       200:
 *         description: X√≥a th√†nh c√¥ng
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng
 */
router.delete(
  "/:id",
  authMiddleware.verifyToken,
  authMiddleware.isAdmin,
  userController.deleteUser
);

/**
 * @openapi
 * /api/users/login:
 *   post:
 *     summary: ƒêƒÉng nh·∫≠p ng∆∞·ªùi d√πng
 *     tags: [Users]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - username
 *               - password
 *             properties:
 *               username:
 *                 type: string
 *                 example: "nhat123"
 *               password:
 *                 type: string
 *                 example: "123456"
 *     responses:
 *       200:
 *         description: ƒêƒÉng nh·∫≠p th√†nh c√¥ng
 *       401:
 *         description: Sai username ho·∫∑c password
 */
// ‚úÖ validate login tr∆∞·ªõc khi g·ªçi controller
router.post("/login", validateLogin, userController.login);

export default router;


